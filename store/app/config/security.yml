# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:

    ###
    # L'encodage du mot de passe : il est par défaut en plaitext (text en dure)
    ###
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
#       Symfony\Component\Security\Core\User\User:
#          algorithm:   sha1
#          iterations: 1
#          encode_as_base64: false

        # encodage se fera au niveau de l'entité Jeweler
        Store\BackendBundle\Entity\Jeweler:
            algorithm: sha512
            iterations: 10 # Nb de fois l'algorithme tourne pour encoder
            encode_as_base64: true

    ###
    # Role des utilisateurs qui vont se connecter avec l'authentification
    # Les utilisateurs seront de rôle "ROLE_JEWELER"
    ###
    role_hierarchy:
        ROLE_EDITOR: ROLE_EDITOR
        ROLE_COMMERCIAL: ROLE_COMMERCIAL
        ROLE_JEWELER: [ROLE_JEWELER, ROLE_COMMERCIAL, ROLE_EDITOR] # Role des bijoutiers quand ils se connectent
        ROLE_USER: [ROLE_USER, ROLE_JEWELER] # Role des utilisateurs quand ils se connectent
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_USER] # Role des ADMIN, hérite de USER et JEWELER

    ###
    # Fournisseur d'authentification
    # par défaut en mémoire ici : définit en dur.
    # J'ai créé un utilisateur en mémoire avec le login admin
    # et le mot de passe adminpass et le role ROLE_JEWELER
    ###
    providers:
#          in_memory:
#                memory:
#                    users:
#                        admin: { password: 74913f5cd5f61ec0bcfdb775414c2fb3d161b620, roles: [ 'ROLE_JEWELER' ] }
#                        # role des bijoutiers quand ils se connecteront
#                        member1: { password: member1, roles:['ROLE_MEMBER'] }

        store_bakend:
                entity: { class: StoreBackendBundle:Jeweler }
#                    admin: { password: 74913f5cd5f61ec0bcfdb775414c2fb3d161b620, roles: [ 'ROLE_JEWELER' ] }
#                    user1: { password: b3daa77b4c04a9551b8781d03191fe098f325e67, roles: [ 'ROLE_USER' ] }

    ###
    # Zone de sécurité d'authentification (firewall)
    ###

    firewalls:
        ###
        # 1er parfeu d'authentification
        # 1ere zone sécurisée pour notre back-office
        # store_backend namespace suivi du nom du bundle
        ###
        store_backend:
            pattern:    ^/administration
            form_login:
                # le chemin vers la vérification du login
                check_path: store_backend_security_login_check
                # le chemin vers la page de login
                login_path: store_backend_security_login

                # le chemin de redirection après l'authentification
                target_path_parameter: store_backend_index
                default_target_path: /administration/dashboard
            logout:
                # le chemin vers la déconnexion
                path:   store_backend_security_logout
                # l'uri de redirection après déconnexion
                target: /login

    ###
    # la liaison entre le firewall et le/les roles
    # le role JEWELER sera lié à notre firewall store_backend
    ###
    access_control:
        - { path: ^/administration/product, roles: ROLE_COMMERCIAL }
        - { path: ^/administration, roles: [ROLE_JEWELER, ROLE_COMMERCIAL, ROLE_EDITOR] }